#
#
# (C) Copyright 2010-2012 Johns Hopkins University (JHU), All Rights
# Reserved.
#
# --- begin cisst license - do not edit ---
#
# This software is provided "as is" under an open source license, with
# no warranty.  The complete license can be found in license.txt and
# http://www.cisst.org/cisst/license.txt.
#
# --- end cisst license ---

# name of project and executable
project (cisstGlobalComponentManagerFLTK)

# set all libraries needed
set (REQUIRED_CISST_LIBRARIES cisstCommon cisstOSAbstraction cisstMultiTask cisstFLTK)

# find cisst and make sure the required libraries have been compiled
find_package (cisst COMPONENTS ${REQUIRED_CISST_LIBRARIES} QUIET)

if (cisst_FOUND_AS_REQUIRED)

  # load cisst configuration
  include (${CISST_USE_FILE})

  # add include paths
  include_directories (${cisstGlobalComponentManagerFLTK_SOURCE_DIR})

  # CMake command, generate .cxx and .h from .fl files
  # then compile them and link them with the executable
  fltk_wrap_ui (cisstGlobalComponentManagerFLTK GlobalComponentManagerUI.fl)

  # name the main executable and specifies with source files to use
  add_executable (cisstGlobalComponentManagerFLTK
                  # code files to compile
                  GCMUITask.cpp
                  main.cpp
                  # header files are provided for information
                  GCMUITask.h
                  # files generated by fluid
                  ${cisstGlobalComponentManagerFLTK_FLTK_UI_SRCS}
                  )
  set_property (TARGET cisstGlobalComponentManagerFLTK PROPERTY FOLDER "cisstMultiTask/applications")

  # link with the cisst libraries
  cisst_target_link_libraries (cisstGlobalComponentManagerFLTK ${REQUIRED_CISST_LIBRARIES})

  install (TARGETS cisstGlobalComponentManagerFLTK
           COMPONENT cisstMultiTask
           RUNTIME DESTINATION bin)

#   if (CISST_cisstParameterTypes)
#     # set all libraries needed
#     set (CISST_LIBRARIES_NEEDED ${CISST_LIBRARIES_NEEDED} cisstParameterTypes)

#     # set include and link directories for cisst
#     cisst_set_directories (${CISST_LIBRARIES_NEEDED})

#     # name the main executable and specifies with source files to use
#     add_executable (TestSignalGenerator
#                     # code files to compile
#                     SignalGeneratorTask.cpp
#                     SignalGeneratorMain.cpp
#                     # header files are provided for information
#                     SignalGeneratorTask.h
#                     )

#     # link with the cisst libraries
#     cisst_target_link_libraries (TestSignalGenerator ${CISST_LIBRARIES_NEEDED})
#   endif (CISST_cisstParameterTypes)

else (cisst_FOUND_AS_REQUIRED)
  cisst_information_message_missing_libraries (${REQUIRED_CISST_LIBRARIES})
endif (cisst_FOUND_AS_REQUIRED)
